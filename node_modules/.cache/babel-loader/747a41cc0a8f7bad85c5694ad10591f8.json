{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortAutoValueFunctions = sortAutoValueFunctions;\n\nvar _getPositionsForAutoValue = require('./getPositionsForAutoValue');\n\nvar _getPositionsForAutoValue2 = _interopRequireDefault(_getPositionsForAutoValue);\n\nvar _AutoValueRunner = require('./AutoValueRunner');\n\nvar _AutoValueRunner2 = _interopRequireDefault(_AutoValueRunner);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @method sortAutoValueFunctions\r\n * @private\r\n * @param {Array} autoValueFunctions - Array of objects to be sorted\r\n * @returns {Array} Sorted array\r\n *\r\n * Stable sort of the autoValueFunctions (preserves order at the same field depth).\r\n */\n\n\nfunction sortAutoValueFunctions(autoValueFunctions) {\n  var defaultFieldOrder = autoValueFunctions.reduce(function (acc, _ref, index) {\n    var fieldName = _ref.fieldName;\n    acc[fieldName] = index;\n    return acc;\n  }, {}); // Sort by how many dots each field name has, asc, such that we can auto-create\n  // objects and arrays before we run the autoValues for properties within them.\n  // Fields of the same level (same number of dots) preserve should order from the original array.\n\n  return autoValueFunctions.sort(function (a, b) {\n    var depthDiff = a.fieldName.split('.').length - b.fieldName.split('.').length;\n    return depthDiff === 0 ? defaultFieldOrder[a.fieldName] - defaultFieldOrder[b.fieldName] : depthDiff;\n  });\n}\n/**\r\n * @method setAutoValues\r\n * @private\r\n * @param {Array} autoValueFunctions - An array of objects with func, fieldName, and closestSubschemaFieldName props\r\n * @param {MongoObject} mongoObject\r\n * @param {Boolean} [isModifier=false] - Is it a modifier doc?\r\n * @param {Object} [extendedAutoValueContext] - Object that will be added to the context when calling each autoValue function\r\n * @returns {undefined}\r\n *\r\n * Updates doc with automatic values from autoValue functions or default\r\n * values from defaultValue. Modifies the referenced object in place.\r\n */\n\n\nfunction setAutoValues(autoValueFunctions, mongoObject, isModifier, isUpsert, extendedAutoValueContext) {\n  var sortedAutoValueFunctions = sortAutoValueFunctions(autoValueFunctions);\n  sortedAutoValueFunctions.forEach(function (_ref2) {\n    var func = _ref2.func,\n        fieldName = _ref2.fieldName,\n        closestSubschemaFieldName = _ref2.closestSubschemaFieldName;\n    var avRunner = new _AutoValueRunner2.default({\n      closestSubschemaFieldName: closestSubschemaFieldName,\n      extendedAutoValueContext: extendedAutoValueContext,\n      func: func,\n      isModifier: isModifier,\n      isUpsert: isUpsert,\n      mongoObject: mongoObject\n    });\n    var positions = (0, _getPositionsForAutoValue2.default)({\n      fieldName: fieldName,\n      isModifier: isModifier,\n      mongoObject: mongoObject\n    }); // Run the autoValue function once for each place in the object that\n    // has a value or that potentially should.\n\n    positions.forEach(avRunner.runForPosition.bind(avRunner));\n  });\n}\n\nexports.default = setAutoValues;","map":null,"metadata":{},"sourceType":"script"}